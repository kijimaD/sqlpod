* データだけ流用して、中身は基本的なクエリの練習
** 内容確認する
#+begin_src sql

SELECT *
FROM receipt
LIMIT 10
#+end_src

#+begin_src
   sales_ymd  sales_epoch store_cd  ...  product_cd  quantity amount
0   20181103   1541203200   S14006  ...  P070305012         1    158
1   20181118   1542499200   S13008  ...  P070701017         1     81
2   20170712   1499817600   S14028  ...  P060101005         1    170
3   20190205   1549324800   S14042  ...  P050301001         1     25
4   20180821   1534809600   S14025  ...  P060102007         1     90
5   20190605   1559692800   S13003  ...  P050102002         1    138
6   20181205   1543968000   S14024  ...  P080101005         1     30
7   20190922   1569110400   S14040  ...  P070501004         1    128
8   20170504   1493856000   S13020  ...  P071302010         1    770
9   20191010   1570665600   S14027  ...  P071101003         1    680

[10 rows x 9 columns]
#+end_src
** 相関サブクエリ。強引に置き換えたため集計内容に意味はない
#+begin_src sql

SELECT store_cd,
       amount
FROM receipt AS s1
WHERE amount >
    (SELECT AVG(amount)
     FROM receipt AS s2
     WHERE s1.store_cd = s2.store_cd
     GROUP BY store_cd)
LIMIT 10
#+end_src

#+begin_src
  store_cd  amount
0   S13020     770
1   S14027     680
2   S13039     428
3   S13016     780
4   S13020    1100
5   S13019     990
6   S14011     495
7   S13018    2200
8   S14045     540
9   S13004    1880
#+end_src
** 相関サブクエリの中身を見てみる
#+begin_src sql

SELECT store_cd,
       AVG(amount)
FROM receipt
GROUP BY store_cd
LIMIT 10
#+end_src

#+begin_src
  store_cd         avg
0   S12007  307.688343
1   S13017  317.581070
2   S13043  318.125000
3   S13052  402.867470
4   S13016  329.639950
5   S14027  314.918466
6   S13009  328.141988
7   S14022  321.643457
8   S13019  330.208616
9   S13039  310.918699
#+end_src
** IN述語で複数条件
#+begin_src sql

SELECT DISTINCT product_cd,
                amount
FROM receipt
WHERE amount in (158,
                 81,
                 30)
LIMIT 10
#+end_src

#+begin_src
   product_cd  amount
0  P070701007      81
1  P060701006     158
2  P080101001      30
3  P070701010      81
4  P070203016     158
5  P070307023     158
6  P070401012     158
7  P070305013     158
8  P090806008     158
9  P050405002     158
#+end_src
** NOT IN
#+begin_src sql

SELECT amount,
       quantity
FROM receipt
WHERE quantity not in (1,
                       3)
LIMIT 10
#+end_src

#+begin_src
   amount  quantity
0      80         2
1     596         2
2     140         2
3    2200         2
4      60         2
5     336         2
6     296         2
7     296         2
8     556         2
9     296         2
#+end_src
** サブクエリで条件検索する
#+begin_src sql

SELECT store_cd,
       amount,
       product_cd,
       customer_id
FROM receipt
WHERE customer_id in
    (SELECT customer_id
     FROM receipt
     WHERE product_cd = 'P070305012')
LIMIT 10
#+end_src

#+begin_src
  store_cd  amount  product_cd     customer_id
0   S14006     158  P070305012  CS006214000001
1   S14042      25  P050301001  ZZ000000000000
2   S13020     770  P071302010  ZZ000000000000
3   S12014     115  P050104001  ZZ000000000000
4   S13002     100  P080803001  ZZ000000000000
5   S13044     268  P040102001  ZZ000000000000
6   S13020    1100  P071401002  ZZ000000000000
7   S13044     190  P071102002  ZZ000000000000
8   S13041     218  P071001084  ZZ000000000000
9   S14045     208  P080602001  ZZ000000000000
#+end_src
** ↑サブクエリの中身
#+begin_src sql

SELECT customer_id,
       product_cd
FROM receipt
WHERE product_cd = 'P070305012'
LIMIT 10
#+end_src

#+begin_src
      customer_id  product_cd
0  CS006214000001  P070305012
1  ZZ000000000000  P070305012
2  CS013515000134  P070305012
3  ZZ000000000000  P070305012
4  ZZ000000000000  P070305012
5  ZZ000000000000  P070305012
6  ZZ000000000000  P070305012
#+end_src
** EXISTS関数。あまりうまい例が思いつかなかった
#+begin_src sql

SELECT store_cd,
       receipt_no,
       amount
FROM receipt AS r0
WHERE EXISTS
    (SELECT *
     FROM receipt AS r1
     WHERE r1.amount = 158
       AND r0.sales_ymd = r1.sales_ymd)
LIMIT 10
#+end_src

#+begin_src
  store_cd  receipt_no  amount
0   S12007         112     190
1   S12007        1102     125
2   S12007        1102     158
3   S12029         112     180
4   S12029        1152      78
5   S12029        1152    1100
6   S12029        1182     270
7   S13001        1162     596
8   S13002        1122     215
9   S13002        1132     458
#+end_src
** WHENで文字を挿入する
#+begin_src sql

SELECT receipt_no,
       CASE
           WHEN store_cd = 'S14006' THEN '大阪:' || store_cd
           WHEN store_cd = 'S13008' THEN '鳥取' || store_cd
           WHEN store_cd = 'S14028' THEN '名古屋' || store_cd
           ELSE NULL
       END AS store
FROM receipt
LIMIT 10
#+end_src

#+begin_src
   receipt_no      store
0         112  大阪:S14006
1        1132   鳥取S13008
2        1102  名古屋S14028
3        1132       None
4        1102       None
5        1112       None
6        1102       None
7        1102       None
8        1112       None
9        1102       None
#+end_src
** 集計した内容を行列変換する
#+begin_src sql

SELECT sum(CASE
               WHEN store_cd = 'S14006' THEN receipt_no
               ELSE 0
           END) AS sum_14,
       sum(CASE
               WHEN store_cd = 'S13008' THEN receipt_no
               ELSE 0
           END) AS sum_15,
       sum(CASE
               WHEN store_cd = 'S14028' THEN receipt_no
               ELSE 0
           END) AS sum_16
FROM receipt
#+end_src

#+begin_src
    sum_14   sum_15   sum_16
0  2357971  2608577  2554669
#+end_src
** UNIONでくっつける
#+begin_src sql

SELECT store_cd,
       amount
FROM receipt
WHERE amount < 300
UNION
SELECT store_cd,
       amount
FROM receipt
WHERE amount < 350
ORDER BY amount
#+end_src

#+begin_src
     store_cd  amount
0      S13019      10
1      S14046      10
2      S14033      10
3      S12013      10
4      S13018      10
...       ...     ...
5851   S14012     348
5852   S14046     348
5853   S13039     348
5854   S13004     348
5855   S12014     348

[5856 rows x 2 columns]
#+end_src
** INTERSECTで共通部分
#+begin_src sql

SELECT store_cd,
       amount
FROM receipt
WHERE amount < 300 INTERSECT
  SELECT store_cd,
         amount
  FROM receipt WHERE amount < 350
ORDER BY amount
#+end_src

#+begin_src
     store_cd  amount
0      S12014      10
1      S13015      10
2      S13051      10
3      S13020      10
4      S14042      10
...       ...     ...
5187   S14040     298
5188   S14023     298
5189   S13001     298
5190   S14049     298
5191   S14046     298

[5192 rows x 2 columns]
#+end_src
** ALLで重複を削除しない
#+begin_src sql

SELECT store_cd,
       amount
FROM receipt
WHERE amount < 300 INTERSECT ALL
  SELECT store_cd,
         amount
  FROM receipt WHERE amount < 350
ORDER BY amount
#+end_src

#+begin_src
      store_cd  amount
0       S12014      10
1       S12014      10
2       S13020      10
3       S13020      10
4       S13035      10
...        ...     ...
82447   S13043     298
82448   S13043     298
82449   S13043     298
82450   S13043     298
82451   S13043     298

[82452 rows x 2 columns]
#+end_src
** EXCEPTで引き算。350以下から300以下を引く。なので300以下は含まれていない
#+begin_src sql

SELECT store_cd,
       amount
FROM receipt
WHERE amount < 350
EXCEPT
SELECT store_cd,
       amount
FROM receipt
WHERE amount < 300
ORDER BY amount
#+end_src

#+begin_src
    store_cd  amount
0     S14023     300
1     S13032     300
2     S13009     300
3     S14049     300
4     S14027     300
..       ...     ...
659   S13016     348
660   S14045     348
661   S12014     348
662   S12029     348
663   S12013     348

[664 rows x 2 columns]
#+end_src
* 基本的なクエリの練習
** 一覧
#+begin_src sql

SELECT *
FROM receipt
LIMIT 10
#+end_src

#+begin_src
   sales_ymd  sales_epoch store_cd  ...  product_cd  quantity amount
0   20181103   1541203200   S14006  ...  P070305012         1    158
1   20181118   1542499200   S13008  ...  P070701017         1     81
2   20170712   1499817600   S14028  ...  P060101005         1    170
3   20190205   1549324800   S14042  ...  P050301001         1     25
4   20180821   1534809600   S14025  ...  P060102007         1     90
5   20190605   1559692800   S13003  ...  P050102002         1    138
6   20181205   1543968000   S14024  ...  P080101005         1     30
7   20190922   1569110400   S14040  ...  P070501004         1    128
8   20170504   1493856000   S13020  ...  P071302010         1    770
9   20191010   1570665600   S14027  ...  P071101003         1    680

[10 rows x 9 columns]
#+end_src
** 一覧
#+begin_src sql

SELECT *
FROM customer
LIMIT 10
#+end_src

#+begin_src
      customer_id customer_name  ... application_date     status_cd
0  CS021313000114        大野 あや子  ...         20150905  0-00000000-0
1  CS037613000071         六角 雅彦  ...         20150414  0-00000000-0
2  CS031415000172       宇多田 貴美子  ...         20150529  D-20100325-C
3  CS028811000001        堀井 かおり  ...         20160115  0-00000000-0
4  CS001215000145         田崎 美紀  ...         20170605  6-20090929-2
5  CS020401000016         宮下 達士  ...         20150225  0-00000000-0
6  CS015414000103         奥野 陽子  ...         20150722  B-20100609-B
7  CS029403000008          釈 人志  ...         20150515  0-00000000-0
8  CS015804000004         松谷 米蔵  ...         20150607  0-00000000-0
9  CS033513000180          安斎 遥  ...         20150728  6-20080506-5

[10 rows x 11 columns]
#+end_src
** INNER JOINでくっつける
#+begin_src sql

SELECT r.customer_id,
       r.amount,
       c.customer_name
FROM receipt AS r
INNER JOIN customer AS c ON r.customer_id = c.customer_id
#+end_src

#+begin_src
          customer_id  amount customer_name
0      CS006214000001     158         志水 佳乃
1      CS008415000097      81          中田 光
2      CS028414000014     170        米倉 ヒカル
3      CS025415000050      90         亀井 奈々
4      CS003515000195     138        梅村 真奈美
...               ...     ...           ...
65677  CS010414000008     150        深沢 千佳子
65678  CS004515000066     308         寺島 奈月
65679  CS046415000017      98         筒井 美嘉
65680  CS040513000195     168          寺田 薫
65681  CS002513000049     148         梶原 まみ

[65682 rows x 3 columns]
#+end_src
** INNER JOIN結果を条件指定する
#+begin_src sql

SELECT r.customer_id,
       r.amount,
       c.customer_name
FROM receipt AS r
INNER JOIN customer AS c ON r.customer_id = c.customer_id
WHERE r.amount = 500
ORDER BY r.amount
#+end_src

#+begin_src
       customer_id  amount customer_name
0   CS040513000031     500         杉原 沙耶
1   CS026414000097     500        本間 沙知絵
2   CS035215000015     500         尾崎 由宇
3   CS040415000252     500         八十田 希
4   CS014415000045     500        安井 さやか
5   CS040415000220     500        藤村 菜々美
6   CS039415000220     500        伊集院 光博
7   CS038214000019     500         菊地 奈月
8   CS031515000131     500         橋口 奈月
9   CS023512000131     500          荻原 窈
10  CS035415000037     500          奥野 茜
11  CS029513000165     500         宮内 那奈
12  CS018415000141     500        宇野 真悠子
13  CS007615000058     500         今西 陽子
14  CS001415000580     500        山元 真悠子
15  CS002414000284     500        田村 未華子
16  CS026615000114     500        豊島 貴美子
17  CS033414000064     500         山崎 そら
18  CS033415000086     500         芦田 りえ
19  CS041515000003     500          長沢 光
20  CS019314000054     500          水口 遥
21  CS032414000024     500        堀井 沙知絵
22  CS005615000094     500        伊東 さやか
23  CS028215000024     500         森山 まみ
24  CS040815000003     500         高島 倫子
25  CS017414000066     500         上杉 そら
26  CS030415000024     500          森下 杏
27  CS034515000173     500         五十嵐 瞬
28  CS035515000154     500        伊東 さやか
29  CS026515000058     500        小柳 千佳子
30  CS020315000106     500          寺田 花
#+end_src
** LEFT OUTER JOIN、でくっつける。片方のテーブルにしかないもの出力しNullが入る。元のテーブルにない外部から情報を持ってくるので外部結合。
#+begin_src sql

SELECT r.customer_id,
       r.amount,
       c.customer_name
FROM receipt AS r
LEFT OUTER JOIN customer AS c ON r.customer_id = c.customer_id
ORDER BY r.amount
LIMIT 100
#+end_src

#+begin_src
       customer_id  amount customer_name
0   CS027513000078      10        松田 菜々美
1   ZZ000000000000      10          None
2   CS013415000168      10         青柳 まみ
3   CS024214000013      10          末永 花
4   ZZ000000000000      10          None
..             ...     ...           ...
95  CS011513000148      10         波多野 愛
96  CS018515000114      10         江藤 コウ
97  CS003314000015      10        菅谷 未華子
98  ZZ000000000000      10          None
99  CS001415000361      10         城戸 美幸

[100 rows x 3 columns]
#+end_src
** ↑のRIGHT OUTER JOINバージョン。customerをマスタにするのでcustomer_nameがNullにならない。
#+begin_src sql

SELECT r.customer_id,
       r.amount,
       c.customer_name
FROM receipt AS r
RIGHT OUTER JOIN customer AS c ON r.customer_id = c.customer_id
ORDER BY r.amount
LIMIT 100
#+end_src

#+begin_src
       customer_id  amount customer_name
0   CS002415000051      10         藤木 そら
1   CS018515000114      10         江藤 コウ
2   CS011515000207      10        前田 璃奈子
3   CS031314000081      10          溝口 咲
4   CS011513000148      10         波多野 愛
..             ...     ...           ...
95  CS027414000084      10         浅野 里穂
96  CS003515000017      10          富田 涼
97  CS028214000013      10         塩田 愛梨
98  CS018414000065      10        浅川 まなみ
99  CS028414000040      10          富田 咲

[100 rows x 3 columns]
#+end_src
** 複数JOIN(OUTER)
#+begin_src sql

SELECT c.customer_name,
       r.amount,
       p.product_cd
FROM customer AS c
LEFT OUTER JOIN receipt AS r ON c.customer_id = r.customer_id
LEFT OUTER JOIN product AS p ON r.product_cd = p.product_cd
#+end_src

#+begin_src
      customer_name  amount  product_cd
0             志水 佳乃   158.0  P070305012
1              中田 光    81.0  P070701017
2            米倉 ヒカル   170.0  P060101005
3             亀井 奈々    90.0  P060102007
4            梅村 真奈美   138.0  P050102002
...             ...     ...         ...
79342          大森 優     NaN        None
79343         柴田 明日     NaN        None
79344         大村 玲那     NaN        None
79345         水谷 明慶     NaN        None
79346         石丸 陽子     NaN        None

[79347 rows x 3 columns]
#+end_src
** 複数JOIN(INNER)
#+begin_src sql

SELECT c.customer_name,
       r.amount,
       p.product_cd
FROM customer AS c
INNER JOIN receipt AS r ON c.customer_id = r.customer_id
INNER JOIN product AS p ON r.product_cd = p.product_cd
#+end_src

#+begin_src
      customer_name  amount  product_cd
0             志水 佳乃     158  P070305012
1              中田 光      81  P070701017
2            米倉 ヒカル     170  P060101005
3             亀井 奈々      90  P060102007
4            梅村 真奈美     138  P050102002
...             ...     ...         ...
65677        深沢 千佳子     150  P060103003
65678         寺島 奈月     308  P059001016
65679         筒井 美嘉      98  P070703003
65680          寺田 薫     168  P050405003
65681         梶原 まみ     148  P060303001

[65682 rows x 3 columns]
#+end_src
** sales_ymdごとのamountのランキングを出す
#+begin_src sql

SELECT sales_ymd,
       amount,
       receipt_no,
       rank () OVER (PARTITION BY sales_ymd
                     ORDER BY amount) AS ranking
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    sales_ymd  amount  receipt_no  ranking
0    20170101      40        1132        1
1    20170101      40        1142        1
2    20170101      45        1182        3
3    20170101      60        1192        4
4    20170101      70        1162        5
..        ...     ...         ...      ...
95   20170102      81        1122        7
96   20170102      88        1192        8
97   20170102      88        1172        8
98   20170102      95        1152       10
99   20170102      95        1122       10

[100 rows x 4 columns]
#+end_src
** ↑PARTITION BY を使わないバージョン。receiptテーブル全体でのランキングになった
#+begin_src sql

SELECT product_cd,
       amount,
       rank () OVER (
                     ORDER BY amount) AS ranking
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    product_cd  amount  ranking
0   P080102009      10        1
1   P080102003      10        1
2   P080102004      10        1
3   P080102001      10        1
4   P080102009      10        1
..         ...     ...      ...
95  P080102002      10        1
96  P080102003      10        1
97  P080102010      10        1
98  P080102001      10        1
99  P080102002      10        1

[100 rows x 3 columns]
#+end_src
** ウィンドウ専用関数でさまざまなランキング
#+begin_src sql

SELECT product_cd,
       amount,
       rank () OVER (
                     ORDER BY amount) AS ranking,
                    dense_rank () OVER (
                                        ORDER BY amount) AS dense_ranking,
                                       row_number () OVER (
                                                           ORDER BY amount) AS row_num
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    product_cd  amount  ranking  dense_ranking  row_num
0   P080102006      10        1              1        1
1   P080102002      10        1              1        2
2   P080102003      10        1              1        3
3   P080102005      10        1              1        4
4   P080102008      10        1              1        5
..         ...     ...      ...            ...      ...
95  P080102010      10        1              1       96
96  P080102003      10        1              1       97
97  P080102009      10        1              1       98
98  P080102002      10        1              1       99
99  P080102001      10        1              1      100

[100 rows x 5 columns]
#+end_src
** ウィンドウ関数でAVG関数を使う
#+begin_src sql

SELECT sales_ymd,
       amount,
       SUM (amount) OVER (
                          ORDER BY sales_ymd) AS current_sum
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    sales_ymd  amount  current_sum
0    20170101     180        33723
1    20170101     198        33723
2    20170101     138        33723
3    20170101     110        33723
4    20170101     338        33723
..        ...     ...          ...
95   20170102     270        57888
96   20170102     596        57888
97   20170102     215        57888
98   20170102     458        57888
99   20170102     440        57888

[100 rows x 3 columns]
#+end_src
** ウィンドウ関数でSUM関数を使う
#+begin_src sql

SELECT sales_ymd,
       amount,
       AVG (amount) OVER (
                          ORDER BY sales_ymd) AS current_avg
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    sales_ymd  amount  current_avg
0    20170101     180   378.910112
1    20170101     198   378.910112
2    20170101     138   378.910112
3    20170101     110   378.910112
4    20170101     338   378.910112
..        ...     ...          ...
95   20170102     270   330.788571
96   20170102     596   330.788571
97   20170102     215   330.788571
98   20170102     458   330.788571
99   20170102     440   330.788571

[100 rows x 3 columns]
#+end_src
** 直近2つのレコードで移動平均
#+begin_src sql

SELECT sales_ymd,
       amount,
       AVG (amount) OVER (
                          ORDER BY sales_ymd ROWS 2 preceding) AS moving_avg_amount
FROM receipt
LIMIT 100
#+end_src

#+begin_src
    sales_ymd  amount  moving_avg_amount
0    20170101     180         180.000000
1    20170101     198         189.000000
2    20170101     138         172.000000
3    20170101     110         148.666667
4    20170101     338         195.333333
..        ...     ...                ...
95   20170102     270         482.666667
96   20170102     596         655.333333
97   20170102     215         360.333333
98   20170102     458         423.000000
99   20170102     440         371.000000

[100 rows x 3 columns]
#+end_src
** グループ化された各日付ごとの順位で並び替える
#+begin_src sql

SELECT sales_ymd,
       amount,
       receipt_no,
       rank () OVER (PARTITION BY sales_ymd
                     ORDER BY amount) AS ranking
FROM receipt
ORDER BY ranking
LIMIT 100
#+end_src

#+begin_src
    sales_ymd  amount  receipt_no  ranking
0    20170310      40        1132        1
1    20170323      30        1142        1
2    20170227      40        1172        1
3    20170309      68        1102        1
4    20170318      30        1142        1
..        ...     ...         ...      ...
95   20170209      51        1112        1
96   20170112      10         112        1
97   20170214      25        1142        1
98   20170128      30        1162        1
99   20170324      80        1112        1

[100 rows x 4 columns]
#+end_src
** UNION ALLで合計行をドッキングする。あまりスマートでない
#+begin_src sql

SELECT '合計' AS store_cd,
       sum(amount)
FROM receipt
UNION ALL
SELECT store_cd,
       sum(amount)
FROM receipt
GROUP BY store_cd
LIMIT 10
#+end_src

#+begin_src
  store_cd       sum
0       合計  33556550
1   S12007    638761
2   S13017    748221
3   S13043    587895
4   S13052    100314
5   S13016    793773
6   S14027    714550
7   S13009    808870
8   S14022    651328
9   S13019    827833
#+end_src
** ROLLUPで↑をスマートに書ける。キー値はNULLなっている
#+begin_src sql

SELECT product_cd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY rollup(product_cd)
LIMIT 10
#+end_src

#+begin_src
   product_cd  sum_amount
0        None    33556550
1  P070701065         810
2  P071001042        1836
3  P070602049         894
4  P060401006        1584
5  P091403021        3600
6  P090701045         598
7  P070904031         198
8  P050407009        2136
9  P050505016         405
#+end_src
** rollupに2つ指定。グループごとに小計を出す
#+begin_src sql

SELECT product_cd,
       sales_ymd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY rollup(product_cd, sales_ymd)
LIMIT 100
#+end_src

#+begin_src
    product_cd   sales_ymd  sum_amount
0         None         NaN    33556550
1   P090301045  20190411.0         315
2   P071101001  20170620.0         278
3   P070601001  20171231.0         216
4   P060101001  20181121.0         110
..         ...         ...         ...
95  P060401005  20180929.0         188
96  P071401010  20170812.0        2400
97  P080401010  20180407.0         110
98  P071401012  20190831.0        2200
99  P071001032  20181011.0         102

[100 rows x 3 columns]
#+end_src
** 超集合のNULLは1になる
#+begin_src sql

SELECT product_cd,
       grouping(product_cd) AS product_cd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY rollup(product_cd)
#+end_src

#+begin_src
      product_cd  product_cd  sum_amount
0           None           1    33556550
1     P070701065           0         810
2     P071001042           0        1836
3     P070602049           0         894
4     P060401006           0        1584
...          ...         ...         ...
7819  P071003021           0        1888
7820  P090806003           0         935
7821  P060801061           0         180
7822  P070707123           0         458
7823  P090204064           0         430

[7824 rows x 3 columns]
#+end_src
** 超集合のNULLに指定した値を入れる
#+begin_src sql

SELECT CASE
           WHEN grouping(product_cd) = 1 THEN '商品コード 合計'
           ELSE product_cd
       END AS product_cd,
       CASE
           WHEN grouping(product_cd) = 1 THEN 111111
           ELSE sales_ymd
       END AS sales_ymd,
       sales_ymd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY rollup(product_cd, sales_ymd)
ORDER BY sum_amount DESC
LIMIT 10
#+end_src

#+begin_src
   product_cd sales_ymd sales_ymd  sum_amount
0    商品コード 合計  111111.0      None    33556550
1  P071401001       NaN      None     1762200
2  P071401002       NaN      None      641300
3  P060303001       NaN      None      514596
4  P071401003       NaN      None      509300
5  P071401012       NaN      None      490600
6  P071401022       NaN      None      408000
7  P071401004       NaN      None      381700
8  P071401013       NaN      None      376200
9  P071401020       NaN      None      374000
#+end_src
** CUBE
#+begin_src sql

SELECT product_cd,
       sales_ymd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY cube(product_cd, sales_ymd)
ORDER BY sum_amount DESC
LIMIT 10
#+end_src

#+begin_src
   product_cd sales_ymd  sum_amount
0        None      None    33556550
1  P071401001      None     1762200
2  P071401002      None      641300
3  P060303001      None      514596
4  P071401003      None      509300
5  P071401012      None      490600
6  P071401022      None      408000
7  P071401004      None      381700
8  P071401013      None      376200
9  P071401020      None      374000
#+end_src
** GROUPING SETS
#+begin_src sql

SELECT CASE
           WHEN grouping(product_cd) = 1 THEN '商品コード 合計'
           ELSE product_cd
       END AS product_cd,
       CASE
           WHEN grouping(product_cd) = 1 THEN 111111
           ELSE sales_ymd
       END AS sales_ymd,
       sales_ymd,
       sum(amount) AS sum_amount
FROM receipt
GROUP BY GROUPING sets(product_cd, sales_ymd)
LIMIT 10
#+end_src

#+begin_src
   product_cd sales_ymd sales_ymd  sum_amount
0  P070701065      None      None         810
1  P071001042      None      None        1836
2  P070602049      None      None         894
3  P060401006      None      None        1584
4  P091403021      None      None        3600
5  P090701045      None      None         598
6  P070904031      None      None         198
7  P050407009      None      None        2136
8  P050505016      None      None         405
9  P070702100      None      None         564
#+end_src
* データ加工100本ノック
** S-001: レシート明細テーブル（receipt）から全項目を10件抽出し、どのようなデータを保有しているか目視で確認せよ。
#+begin_src sql

SELECT *
FROM receipt
LIMIT 10
#+end_src

#+begin_src
   sales_ymd  sales_epoch store_cd  ...  product_cd  quantity amount
0   20181103   1541203200   S14006  ...  P070305012         1    158
1   20181118   1542499200   S13008  ...  P070701017         1     81
2   20170712   1499817600   S14028  ...  P060101005         1    170
3   20190205   1549324800   S14042  ...  P050301001         1     25
4   20180821   1534809600   S14025  ...  P060102007         1     90
5   20190605   1559692800   S13003  ...  P050102002         1    138
6   20181205   1543968000   S14024  ...  P080101005         1     30
7   20190922   1569110400   S14040  ...  P070501004         1    128
8   20170504   1493856000   S13020  ...  P071302010         1    770
9   20191010   1570665600   S14027  ...  P071101003         1    680

[10 rows x 9 columns]
#+end_src
